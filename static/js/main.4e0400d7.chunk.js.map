{"version":3,"sources":["InfoBox.js","util.js","Map.js","Table.js","LineGraph.js","App.js","serviceWorker.js","index.js"],"names":["InfoBox","title","cases","isRed","isBlack","active","total","props","Card","onClick","className","CardContent","Typography","color","casesTypeColors","hex","multiplier","recovered","deaths","sortData","data","sortedData","sort","a","b","prettyPrintStat","stat","numeral","format","Map","countries","casesType","center","zoom","TileLayer","url","attribution","map","country","Circle","countryInfo","lat","long","fillOpacity","fillColor","radius","Math","sqrt","Popup","style","backgroundImage","flag","showDataOnMap","Table","options","legend","display","elements","point","maintainAspectRatio","tooltips","mode","intersect","callbacks","label","tooltipItem","value","scales","xAxes","type","time","tooltipFormat","yAxes","gridLines","ticks","callback","index","values","buildChartData","lastDataPoint","chartData","date","newDataPoint","x","y","push","LineGraph","useState","setData","useEffect","fetch","then","response","json","console","log","fetchData","length","datasets","backgroundColor","borderColor","App","setCountries","setCountry","setCountryInfo","tableData","setTableData","lng","mapCenter","setMapCenter","mapZoom","setMapZoom","mapCountries","setMapCountries","setCasesType","name","iso2","getCountriesData","onCountryChange","event","countryCode","target","FormControl","Select","variant","onChange","MenuItem","e","todayCases","todayRecovered","todayDeaths","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.4e0400d7.chunk.js","sourcesContent":["import React from 'react';\r\nimport \"./InfoBox.css\";\r\nimport { Card, CardContent, Typography } from '@material-ui/core';\r\n\r\n\r\nfunction InfoBox({ title, cases, isRed, isBlack, active, total, ...props }) {\r\n    return (\r\n        <Card onClick={props.onClick} className={`infoBox ${active && \"infoBox--selected\"}\r\n             ${isRed && \"infoBox--red\"} ${isBlack && \"infoBox--black\"}`}>\r\n            <CardContent>\r\n                <Typography className=\"infoBox__title\" color=\"textSecondary\">{title}</Typography>\r\n                <h2 className={`infoBox__cases ${!isRed && \"infoBox__cases--green\"}\r\n                 ${isBlack && \"infoBox__cases--blacky\"}`}>{cases}</h2>\r\n                <Typography className=\"infoBox__total\" color=\"textSecondary\">{total} Total</Typography>\r\n            </CardContent>\r\n        </Card>\r\n    )\r\n}\r\n\r\nexport default InfoBox\r\n","import React from 'react';\r\nimport numeral from \"numeral\";\r\nimport { Circle, Popup } from \"react-leaflet\";\r\n\r\nconst casesTypeColors = {\r\n    cases: {\r\n      hex: \"#CC1034\",\r\n      multiplier: 800,\r\n    },\r\n    recovered: {\r\n      hex: \"#7dd71d\",\r\n      multiplier: 1200,\r\n    },\r\n    deaths: {\r\n      hex: \"black\",\r\n      multiplier: 2000,\r\n    },\r\n  };\r\n  \r\nexport const sortData = (data) => {\r\n    const sortedData = [...data];\r\n    sortedData.sort((a, b) => (a.cases > b.cases ? -1 : 1));\r\n    return sortedData;\r\n};\r\n\r\nexport const prettyPrintStat = (stat) =>\r\n stat ? `+${numeral(stat).format(\"0.0a\")}` : \"+0\";\r\n\r\nexport const showDataOnMap = (data, casesType = 'cases') => (\r\n    data.map(country => (\r\n         <Circle\r\n             center={[country.countryInfo.lat, country.countryInfo.long]} \r\n             fillOpacity={0.4}\r\n             color={casesTypeColors[casesType].hex}\r\n             fillColor={casesTypeColors[casesType].hex}\r\n             radius={\r\n               Math.sqrt(country[casesType]) * casesTypeColors[casesType].multiplier\r\n              } \r\n              >\r\n         <Popup>\r\n             <div className=\"info-container\">\r\n                 <div className=\"info-flag\"\r\n                   style={{ backgroundImage: `url(${country.countryInfo.flag})` }}\r\n                 />\r\n                 <div className=\"info-name\">{country.country}</div>\r\n                 <div className=\"info-confirmed\">Cases: {numeral(country.cases).format(\"0,0\")}</div>\r\n                 <div className=\"info-recovered\">Recovered: {numeral(country.recovered).format(\"0,0\")}</div>\r\n                 <div className=\"info-deaths\">Deaths: {numeral(country.deaths).format(\"0,0\")}</div>\r\n             </div>\r\n         </Popup>\r\n         </Circle>\r\n    ))\r\n);","import React from 'react';\r\nimport \"./Map.css\";\r\nimport { Map as LeafletMap, TileLayer } from \"react-leaflet\";\r\nimport { showDataOnMap } from \"./util\";\r\n\r\nfunction Map({ countries, casesType, center, zoom }) {\r\n    return (\r\n        <div className=\"map\">\r\n            <LeafletMap center={center} zoom={zoom}>\r\n            <TileLayer\r\n          url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n          attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n        />\r\n         {showDataOnMap(countries, casesType)}\r\n            </LeafletMap>            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Map\r\n","import React from 'react';\r\nimport './Table.css';\r\nimport numeral from \"numeral\";\r\n\r\nfunction Table({ countries }) {\r\n    return (\r\n        <div className=\"table\">\r\n            {countries.map(({country, cases}) => (\r\n              /* Emmet */\r\n                <tr>\r\n                    <td>{country}</td>\r\n                    <td><strong>{numeral(cases).format(\"0,0\")}</strong></td>\r\n                </tr>\r\n            ))}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Table\r\n","import React, { useState, useEffect } from 'react';\r\nimport { Line } from \"react-chartjs-2\";\r\nimport numeral from \"numeral\";\r\n\r\nconst options = {\r\n    legend: {\r\n        display: false,\r\n    },\r\n    elements: {\r\n        point: {\r\n            radius: 0,\r\n        },\r\n    },\r\n    maintainAspectRatio: false,\r\n    tooltips: {\r\n        mode: \"index\",\r\n        intersect: false,\r\n        callbacks: {\r\n            label: function (tooltipItem, data) {\r\n                return numeral(tooltipItem.value).format(\"+0,0\");\r\n            },\r\n        },\r\n    },\r\n    scales: {\r\n        xAxes: [\r\n            {\r\n                type: \"time\",\r\n                time: {\r\n                    format: \"MM/DD/YY\",\r\n                    tooltipFormat: \"ll\",\r\n                },\r\n            },\r\n        ],\r\n        yAxes: [\r\n            {\r\n                gridLines: {\r\n                    display: false,                   \r\n                },\r\n                ticks: {\r\n                     // Include a dollar sign in the ticks\r\n                     callback: function (value, index, values) {\r\n                        return numeral(value).format(\"0a\");\r\n                     },\r\n                },\r\n            },\r\n        ],\r\n    },\r\n};\r\n\r\nconst buildChartData = (data, casesType) => {\r\n     let chartData = []; \r\n     let lastDataPoint;\r\n    for (let date in data.cases) { \r\n        if (lastDataPoint) {\r\n          let newDataPoint = {\r\n            x: date,\r\n            y: data[casesType][date] - lastDataPoint,\r\n            };\r\n            chartData.push(newDataPoint);\r\n        }\r\n        lastDataPoint = data[casesType][date];\r\n    }\r\n    return chartData;\r\n};\r\n\r\nfunction LineGraph({ casesType, ...props}) {\r\n    const [data, setData] = useState({});\r\n\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n        await fetch(\"https://disease.sh/v3/covid-19/historical/all?lastdays=120\")\r\n            .then((response) => { \r\n               return response.json();\r\n             })\r\n            .then((data) => {\r\n                 let chartData = buildChartData(data, casesType);\r\n                 setData(chartData);\r\n                 console.log(chartData);\r\n                 //buildChart(chartData);\r\n\r\n            });\r\n        };\r\n        \r\n        fetchData();\r\n    }, [casesType]);\r\n\r\n    return (\r\n        <div className={props.className}>\r\n            {data?.length > 0 && (\r\n                 <Line                 \r\n                 data={{\r\n                    datasets: [ \r\n                        {\r\n                            backgroundColor: \"rgba(204, 10, 52, 0.5)\",\r\n                            borderColor: \"#CC1034\",\r\n                            data: data,\r\n                        },\r\n                    ],\r\n                }}\r\n                 options={options} />\r\n            )}          \r\n        </div>\r\n    );\r\n}\r\n\r\nexport default LineGraph;\r\n","import React, {useState, useEffect} from 'react';\nimport { MenuItem, FormControl, Select, Card, CardContent } from \"@material-ui/core\";\nimport InfoBox from './InfoBox';\nimport Map from './Map';\nimport Table from './Table';\nimport { sortData, prettyPrintStat } from './util';\nimport LineGraph from './LineGraph';\nimport \"leaflet/dist/leaflet.css\";\nimport './App.css';\n\nfunction App() {\n  const [countries, setCountries] = useState([]);\n  const [country, setCountry] = useState('worldwide');\n  const [countryInfo, setCountryInfo] = useState({});\n  const [tableData, setTableData] = useState([]);\n  const [mapCenter, setMapCenter] = useState({lat: 34.80746, lng: -40.4796});\n  const [mapZoom, setMapZoom] = useState(3);\n  const [mapCountries, setMapCountries] = useState([]);\n  const [casesType, setCasesType] = useState(\"cases\");\n\n  useEffect(() => {\n    fetch(\"https://disease.sh/v3/covid-19/all\")\n    .then(response => response.json())\n    .then(data => {\n      setCountryInfo(data);\n    });\n  }, []);\n\n  useEffect(() => {\n   const getCountriesData = async () => {\n     await fetch (\"https://disease.sh/v3/covid-19/countries\")\n     .then((response) => response.json())\n     .then((data) => {\n       const countries = data.map((country) => ({\n           name: country.country,\n           value: country.countryInfo.iso2\n         }));\n         \n         const sortedData = sortData(data);\n         setTableData(sortedData);\n         setMapCountries(data);\n         setCountries(countries);\n     });\n   };\n   getCountriesData();\n  }, []);\n\n  const onCountryChange = async (event) => {\n    const countryCode = event.target.value;\n    setCountry(countryCode);\n\n    const url = countryCode === \"worldwide\" ? \"https://disease.sh/v3/covid-19/all\" : \n     `https://disease.sh/v3/covid-19/countries/${countryCode}`;\n\n     await fetch(url)\n     .then(response => response.json())\n     .then(data => {\n       setCountry(countryCode);\n       setCountryInfo(data);   \n       setMapCenter([data.countryInfo.lat, data.countryInfo.long]);\n       setMapZoom(4);\n     });\n  };\n  console.log(\"COUNTRY INFO >>>>\", countryInfo);\n  return (\n    <div className=\"app\"> \n    <div className=\"app__left\">\n    <div className=\"app__header\">\n      <h1>OUMAIMA'S COVID-19 TRACKER</h1>\n      <FormControl className=\"app__dropdown\">\n        <Select variant=\"outlined\" onChange={onCountryChange} value={country} >\n        <MenuItem value=\"worldwide\">Worldwide</MenuItem>\n          {countries.map(country => (\n              <MenuItem value={country.value}>{country.name}</MenuItem>\n            ))}\n        </Select>\n      </FormControl>\n      </div>\n      <div className=\"app__stats\">\n      <InfoBox       \n       active={casesType === \"cases\"} \n       isRed\n       onClick={ e => setCasesType('cases')}\n       title=\"Coronavirus Cases\"\n       cases={prettyPrintStat(countryInfo.todayCases)} \n       total={prettyPrintStat(countryInfo.cases)} />\n      <InfoBox\n       active={casesType === \"recovered\"} \n       onClick={ e => setCasesType('recovered')}\n       title=\"Recovered\"\n       cases={prettyPrintStat(countryInfo.todayRecovered)}\n        total={prettyPrintStat(countryInfo.recovered)} />\n      <InfoBox      \n       active={casesType === \"deaths\"} \n       isBlack\n       onClick={ e => setCasesType('deaths')}\n       title=\"Deaths\"\n       cases={prettyPrintStat(countryInfo.todayDeaths)}\n        total={prettyPrintStat(countryInfo.deaths)} />\n      </div>\n      <Map\n       countries={mapCountries}\n       casesType={casesType}\n       center={mapCenter}\n       zoom={mapZoom}/>\n       </div>\n      <Card className=\"app__right\">\n        <CardContent>\n          <h3>Live cases by country</h3>\n          <Table countries={tableData}/>\n          <h3 className=\"app__graphTitle\">Worldwide new {casesType}</h3>\n          <LineGraph className=\"app__graph\" casesType={casesType} />\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}